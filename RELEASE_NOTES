              RELEASE NOTES for asyn version of tpmac module

                            Matthew Pearson
			      17 July 12

1. Added a new 'model 3' PMAC driver based on asynMotorController/Axis.
   This is in pmacApp/pmacAsynMotorPortSrc/ directory.

   The IOC shell function calls are:
	pmacAsynIPConfigure("pmacLV", "172.23.243.164:1025")
	pmacCreateController("PMAC1", "pmacLV", 0, 3, 50, 500)
	pmacCreateAxis("PMAC1", 1)
	pmacCreateAxis("PMAC1", 2)
	etc.

	There is more detail in the example IOC (pmacGeobrickExamplePortDriver).

   Currently the driver is a drop in replacement for the old 'model 2' driver, with
   similar IOC shell function calls. 

   The driver has been tested on linux and VxWorks.
	


		            Matthew Pearson
	                      22 March 12

1. Changes to pmacAsynMotor

* Added in a check for the limits disabled bit in ix24 in the poller thread.
By default the poller thread checks the limits disabled bit in ix24, and if limits are 
disabled sets the motorAxisProblem bit in MSTA. This will cause the motor record 
to go into MAJOR/STATE alarm (and flash red).

To disabled this feature, there are two methods.

To disable globally, do:

# pmacDisableLimitsCheck(int card, int axis, int allAxes)
pmacDisableLimitsCheck(0, 1, 1)

To disable on a per-axis basis, do:

# pmacDisableLimitsCheck(int card, int axis, int allAxes)
pmacDisableLimitsCheck(0, 1, 0)
pmacDisableLimitsCheck(0, 2, 0)
pmacDisableLimitsCheck(0, 3, 0)
pmacDisableLimitsCheck(0, 4, 0)
pmacDisableLimitsCheck(0, 5, 0)
etc.

Make sure the above function calls are called after calling pmacAsynMotorCreate in the IOC startup file.

This has been tested using a Delta Tau Geobrick and a VME PMAC, both on linux and VxWorks.


		            Matthew Pearson
	                      24 Oct 11

Summary of changes over the past few months:

!! Changes to pmacAsynIPPort
----------------------------

There are quite a few changes to pmacAsynIPPort.c
* Fix problem with vxWorks builds
* Fix problem reading large buffers composed of multiple packets

!! Changes to pmacAsynMotorSrc
------------------------------

Changes to pmacAsynMotor.h:
* New function prototype to set encoder readback from a different axis number 
(see Nicks comments below, 15 Feb 10)
* New utility function to test reading a large buffer

Changes to pmacAsynMotor.dbd:
* Removed include of motorSupport.dbd, so applications will need to include
  this manually from now.

Changes to pmacAsynMotorRegister.cc
* Added register functions for the two new functions so they can be used on
  the IOC shell.

Changes to pmacAsynMotor.c:
* Made a fix to the deferred move implementation in the PMAC driver. There
  was a race condition between turning off deferred moves and the poller
  thread, which was causing some moves to return early when scanning with
  deferred moves.
* Added amplifier fault bit check. The motor record MSTA problem bit will
  be set if the amplifier fault is on.
* Changed the set position logic to also set the encoder axis position, if
  one is in use. This relies on the correct encoder ratio being set by asyn
  device support.
* Added axis status poll when setting encoder axis number. Changed it to
  use global pAsynUser.
* Added pmacSetOpenLoopEncoderAxis axis configuration routine (see below)
* Moved pmac abort (A cmd) earlier in command sequence so drive amps have
  longer to start up
* Changed definition on motorAxisMoving. Now it is set
  desired_velocity_zero=0 & motor activated (ix00=1) & amplifier enabled.
  The new check is for amplifier enabled. This is to prevent EPICS thinking
  an axis is moving if it has been killed.
* Redefined motor done. Now, if we are not in position but the amplifier
  has been disabled then we have finished moving. This will catch fatal
  following errors. In the same database update the fatal following error
  flag should be set. This change is to prevent clients from hanging,
  waiting for a motor to finish moving, in the case of fatal following
  errors.
* Only send a J/ if the amplifier output is enabled. When we send a stop,
  we don't want to power on axes that have been powered off for a reason.
* Better feedback of axis status in the poller thread.

Changed to pmacAsynCoord:

* This has been moved out of tpmac and into pmacCoord module.


                              Nick Rees
                              15 Feb 10

There are now a couple of axis configuration routines, as well as the
PMAC global ones. These are pmacSetAxisScale and pmacSetOpenLoopEncoderAxis.

pmacSetAxisScale will scale all positions by a set number, so the
EPICS motor record (which likes integral positions) can make use of
the extra 5 bits of interpolated position which are available after
the decimal point on the pmac. All motor and limit positions for that
axis will be in the new scale. The call is:

    pmacSetAxisScale(
        int card,         /* the third parameter for pmacAsynMotorCreate */
        int axis,         /* a PMAC axis which is driven open loop. */
        int scale )/* the scale (1-32, usually in powers of 2 */

This call should be made just after pmacAsynMotorCreate. Note that
scale is an integer, and should normally, sensibly, only be 32, but
other values are a possibility.

pmacSetOpenLoopEncoderAxis can be used if you want to close open loop
PMAC axes in the motor record (using UEIP) around a econder on another
axis in the PMAC. It should also be called just after pmacAsynMotorCreate:

    pmacSetOpenLoopEncoderAxis(
        int card,         /* the third parameter for pmacAsynMotorCreate */
        int axis,         /* a PMAC axis which is driven open loop. */
        int encoder_axis )/* the axis on which the encoder is read back. */

This is fiarly self explanatory. The result of the "P" command on the
motor axis will be returned on the "motor position" motor status
field, and the reult of the "P" command on the encoder axis will be
returned in the "encoder position" motor status field.


              RELEASE NOTES for asyn version of tpmac module

		            Matthew Pearson
	                      11 Feb 09

1. Changes to pmacAsynIPPort

Ported to work with Asyn 4-10. It still compiles with Asyn 4-9, but
is no longer compatible.

Made extensive changes to the pmacAsynIPPort.c file to enable better
support for ethernet based Delta Tau PMACS. This is an asyn interpose
layer that deals with ethernet specific PMAC headers and trailers.

Also added new configuration functions for use in the IOC shell.

2. How to configure an IOC to use an ethernet PMAC:

pmacAsynIPConfigure("pmacLV", "172.23.243.156:1025")
pmacAsynMotorCreate("pmacLV", 0, 0, 8)
drvAsynMotorConfigure("PMAC1", "pmacAsynMotor", 0, 9)

similary for a 2nd ethernet PMAC in the same IOC:

pmacAsynIPConfigure("pmacLV2", "172.23.243.157:1025")
pmacAsynMotorCreate("pmacLV2", 0, 1, 8)
drvAsynMotorConfigure("PMAC2", "pmacAsynMotor", 1, 9)

3. To change to PMAC driver polling rates in the IOC shell:

To change the polling period when the motor is not moving:
pmacSetIdlePollPeriod(0, 500)

To change the polling period when the motor is moving.
pmacSetMovingPollPeriod(0, 50)

The first parameter is the 'card'. The second parameter is the
polling period in milliseconds.

NOTE: The default idle polling period is 500ms. The default moving
polling period is 100ms.




              RELEASE NOTES for asyn version of tpmac module.

                               Nick Rees
                             26 July 2006

1. Backwards incompatible changes since the last release.

This release chould be completely backwards compatible with the old
release with the exception of the VxWorks startup scripts. These need an
extra line to create asyn ports that are used for ASCII communication
and a change to pmacDrvConfig to say which asyn port the ASCII
communications should use.

For example, previously you may have configured the pmac with the lines:

pmacVmeConfig (0, 0x7FA000, 0x700000, 0xa1, 6)
pmacDrvConfig (0, 0, 0, 0, 0)

Now, to get the same effect, you must use the lines:

pmacVmeConfig (0, 0x7FA000, 0x700000, 0xa1, 6)
pmacAsynConfig( "PMAC_MBX_PORT_", 0 )
pmacDrvConfig (0, 0, 0, 0, "PMAC_MBX_PORT_0" )

The parameters for pmacAsynConfig are two character strings which are
the prefix of asyn ports to be set up for each configured PMAC card's
mailbox and DPRAM ascii buffer respectively. If the string is not NULL,
the routine will create an Asyn port and append the card number to the
string prefix. In the above example, since we configured only one card,
and gave it number 0, pmacAsynConfig will create a single asyn port
PMAC_MBX_PORT_0. It will not create any asyn ports for the DPRAM ASCII
buffer since the second parameter is NULL.

The final parameter for pmacDrvConfig has also changed. Formerly, it was
a disableMbx flag. Now, it is the asyn port to be used for ASCII
communication. It can be an Mailbox, DPRAM ASCII, serial port or IP port
(However, asyn support for the PMAC IP interface isn't implemented yet).


2. New features.

Since the ASCII communications at the lowest level use an asynOctet
port, then you can use other asynOctet upper level software. Examples of
this are:

a. asynRecord

You can connect any asyn record on your IOC to any available asynOctet
port connected to your PMAC and use this as a simple command line interface.

b. Motor Record

The directory pmacAsynMotorSrc contains a PMAC motor record driver in
the new asynMotor framework. To configure motor support for all motors
on a card, add the following lines to the configuration lines given
above:

pmacAsynMotorCreate("PMAC_MAX_PORT_0", 0, 0, 32 );
drvAsynMotorConfigure("pmac0", "pmacAsynMotor", 0, 33)

The first of these configures the pmacAsynMotor driver and the second
configures the generic drvAsynMotor layer. Note that this requires >
release 5.9 of motor support and >= release 4.6 of asyn support.

The parameters for the first routine are:
 - port (char *) Asyn port for PMAC ASCII communicatons.
 - address (int) Asyn port address. Always 0.
 - card (int)    Card number to use. Is not necessarily the same card #
                 used in the other initialisation routines, but probably
                 should be.
 - naxes (int)   Number of axes to configure. 1 based.

The parameters for the second routine are:
 - port (char *)   drvAsynMotor asyn port to be created.
 - drvSup (char *) Driver support entry table name for driver. For PMAC
                   this is pmacAsynMotor.
 - card (int)      Card number specified in pmacAsynMotorCreate for this
                   axis.
 - nAxes (int)     #axes to configure (zero based). Note that since PMAC
                   axes are 1 based and drvAsynMotor axes are 0 based
                   this will generate a non-fatal warning of the form:
                   <datestamp> drvAsynMotorConfigure: Failed to open axis 0

To connect motor records to this driver, use:

DTYP asynMotor and an
OUT  @asyn($(PORT),$(AXIS))

Where PORT is the asyn port and AXIS the motor axis #.

c. Streams.

You should be able to use streamDevice 2.0 and above to communicate
other ascii commands to the underlying asynOctet port. 

d. asynUploadFile

This is a generic routine to upload a file to an asyn port. For example:

asynUploadFile( "data/pmacTest.pmc", "PMAC_MBX_PORT_0", "\r", "\06" )

The parameters are:

 - filename (char *) File to upload.
 - asynPort (char *) asynOctet port to upload the file to.
 - out_term (char *) Output terminator to use at the end of every line
 - inp_term (char *) Input terminator to search for in response to every line.

All responses are ignored, the terminators just being scanned for as a handshake. If the writeread routine returns an error the routine exits printing the line number and


3. Known problems/still to do

a. Resolve the terminators for error notification. Currently,
     - The DPRAM and MBX ASCII drivers return an error as <BELL>ERRnnn<CR><ACK>
     - The serial line returns an error as <BELL>ERRnnn<CR>
   We need to adopt a standard. I prefer the first since then all
   transactions are terminated with an <ACK>, but then the serial line
   driver needs an interpose interface to add the trailing <ACK>.
b. Add windows support. This should be a asyn port using the PMAC
   windows drivers.
c. Add Linux PCI support. There is a Linux open/close/read/write
   driver that should fit in fairly simply. It might need an interpose
   interface to handle terminators.
d. Convert the Asyn PMAC drivers to use the CPP asynMotorController/Axis interface.
e. Add Diamond standard templates for PMAC co-ordinate systems.

Note for those implementing the asynOctet drivers they must emulate the
syntax of the PMAC serial port. Basically the means that on write "\r"
is used as a record terminator, and on read ACK is used for a success
terminator and <BELL>ERRnnn<CR><ACK> for an error response.
