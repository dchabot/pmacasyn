##############################################################
#
# Records to read asynPortDriver parameters from the param 
# library. This is for the Asyn model 3 driver pmacController 
# driver.
#
# The Asyn address is set as zero because that's what we use 
# for controller parameters.
#
##############################################################

##############################################################
# This record indicates if we have a controller problem
##############################################################

# ///
# /// Record used to indicate if the controller has a problem. This is set in the
# /// controller poll loop, and is used to set the motor record axis status.
# ///
record(bi, "$(P)$(R)GLOBAL_PROBLEM_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PMAC_C_GLOBALSTATUS")
   field(SCAN, "I/O Intr")
   field(ZNAM, "Status OK")
   field(ONAM, "Status Problem")
}

##############################################################
# Monitor and set the PMAC feedrate
##############################################################

# ///
# /// Get the PMAC feedrate. This is read in the controller poll loop.
# ///
record(ai, "$(P)$(R)FEEDRATE_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PMAC_C_FEEDRATE")
   field(SCAN, "I/O Intr")
   field(PREC, "2")
}

# ///
# /// Set the PMAC feedrate limit. This determins if the current feedrate
# /// read from the controller is out of range, and will be used to set axis alarms.
# ///
record(longout, "$(P)$(R)FEEDRATE_LIMIT")
{
   field(PINI, "YES")
   field(VAL, "$(FEEDRATE)")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PMAC_C_FEEDRATE_LIMIT")
   field(DRVH, "100")
   field(DRVL, "0")
}

# ///
# /// Set the PMAC feedrate limit. This writes a new feedrate to
# /// the controller.
# ///
record(longout, "$(P)$(R)FEEDRATE")
{
   field(PINI, "YES")
   field(VAL, "$(FEEDRATE)")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PMAC_C_FEEDRATE")
   field(DRVH, "100")
   field(DRVL, "0")
}

# ///
# /// Enable or disable feedrate polling.
# ///
record(bo, "$(P)$(R)FEEDRATE_POLL_ENABLE")
{
   field(PINI, "YES")
   field(VAL, "$(FEEDRATE_POLL=0)")
   field(ZNAM, "Disabled")
   field(ONAM, "Enabled")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PMAC_C_FEEDRATE_POLL")
}

# ///
# /// Record used to indicate if the feedrate is below the limit. This is set from the
# /// controller poll loop, and is used to set the motor record axis status.
# ///
record(bi, "$(P)$(R)FEEDRATE_PROBLEM_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PMAC_C_FEEDRATE_PROBLEM")
   field(SCAN, "I/O Intr")
   field(ZNAM, "Feedrate OK")
   field(ONAM, "Feedrate Problem")
}









