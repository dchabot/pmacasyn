#! This file is new. It was introduced by Oleg 09/2003 for PMAC2
#! The DB set in this files is a combination of svofix1.db and
#! bkgfix1mtr.db in PMAC1.
#! *** Do not use with PMAC1! ***
#!
#! This is a reduced version of mtrdat.db used to setup motor-only database
#! with Turbo PMAC32 controller (mainly for output motor channel #32)

record(status, "$(mtr)SvoSts") {
  field(DESC, "Servo Status")
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "PMAC-VME DPRAM")
  field(INP, "#C$(C) S$(S) @DP:$60020")
  field(LK19, "$(mtr)AmpEna.PROC PP MS")
  field(LK21, "$(mtr)PsLimSet.PROC PP MS")
  field(LK22, "$(mtr)NgLimSet.PROC PP MS")
}

record(bi, "$(mtr)NgLimSet") {
  field(DESC, "Negative End Limit")
  field(INP, "$(mtr)SvoSts.BI22 NPP MS")
  field(OSV, "MAJOR")
  field(ZNAM, "OK")
  field(ONAM, "Tripped")
}

record(bi, "$(mtr)PsLimSet") {
  field(DESC, "Positive End Limit")
  field(INP, "$(mtr)SvoSts.BI21 NPP MS")
  field(OSV, "MAJOR")
  field(ZNAM, "OK")
  field(ONAM, "Tripped")
}

record(bi, "$(mtr)AmpEna") {
  field(DESC, "Amplifier Enable")
  field(INP, "$(mtr)SvoSts.BI19 NPP MS")
  field(ZSV, "MAJOR")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(status, "$(mtr)Sts2") {
  field(DESC, "General status")
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "PMAC-VME DPRAM")
  field(INP, "#C$(C) S$(S) @DP:$60021")
  field(LK00, "$(mtr)InPos.PROC PP MS")
  field(LK02, "$(mtr)FatalFolErr.PROC PP MS")
  field(LK03, "$(mtr)AmpFltErr.PROC PP MS")
  field(LK10,"$(mtr)HmCplt.PROC PP MS")
  field(LK11, "$(mtr)StpOnLim.PROC PP MS")
}

record(bi, "$(mtr)StpOnLim") {
  field(DESC, "Stopped On Limit")
  field(INP, "$(mtr)Sts2.BI11 NPP MS")
  field(OSV, "MAJOR")
  field(ZNAM, "OK")
  field(ONAM, "Stopped")
}

record(bi,"$(mtr)HmCplt") {
  field(DESC,"Home Complete")
  field(INP,"$(mtr)Sts2.BI10 NPP MS")
  field(ZSV,"MINOR")
  field(ZNAM,"N/A")
  field(ONAM,"Completed")
}

record(bi, "$(mtr)AmpFltErr") {
  field(DESC, "Amplifier Fault Error")
  field(INP, "$(mtr)Sts2.BI03 NPP MS")
  field(OSV, "MAJOR")
  field(ZNAM, "OK")
  field(ONAM, "Fault")
}

record(bi, "$(mtr)FatalFolErr") {
  field(DESC, "Fatal Following Error")
  field(INP, "$(mtr)Sts2.BI02 NPP MS")
  field(OSV, "MAJOR")
  field(ZNAM, "OK")
  field(ONAM, "Fatal")
}

record(bi, "$(mtr)InPos") {
  field(DESC, "In Position")
  field(INP, "$(mtr)Sts2.BI00 NPP MS")
  field(ZSV, "MINOR")
  field(ZNAM, "Moving")
  field(ONAM, "Positioned")
}

### The default asloPos is: 1/(32*Ix08) = 1/(32*96) = 1/3072 = 3.2552e-04
### where Ix08 is motor position scale factor.
record(ai, "$(mtr)ActPos") {
  field(DESC, "$(desc)")
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "PMAC-VME DPRAM")
  field(INP, "#C$(C) S$(S) @D:$60027")
  field(EGU, "(cts)")
  field(PREC, "$(prec)")
  field(ASLO, "$(asloPos)")
}

### The default asloPos is: 1/(32*Ix08) = 1/(32*96) = 1/3072 = 3.2552e-04
### where Ix08 is motor position scale factor.
record(ai, "$(mtr)FolErr") {
  field(DESC,"Following Error")
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "PMAC-VME DPRAM")
  field(INP, "#C$(C) S$(S) @D:$6001D")
  field(EGU, "(cts*32)")
  field(PREC, "$(prec)")
  field(ASLO, "$(asloPos)")
}

### The default asloVel is: 1/(32*Ix09) = 1/(32*96) = 1/3072 = 3.2552e-04
### where Ix09 is motor velocity scale factor.
record(ai,"$(mtr)ActVelSvo") {
  field(DESC,"Actual Velocity/Servo")
  field(SCAN,"I/O Intr")
  field(PINI,"YES")
  field(DTYP,"PMAC-VME DPRAM")
  field(FLNK,"$(mtr)ActVel.PROC PP MS")
  field(INP,"#C$(C) S$(S) @SX:$60024")
  field(EGU,"(cts/servo)")
  field(PREC,"3")
  field(ASLO, "$(asloVel)")
}

### The above parameter ActVelSvo is counts/servocycle
### To recalculate it into counts/msec we need to divide by servo cycle time
### which I10=3713707 [/83888608] msec.
### So: 8388608/3713707=2.2588233267
record(calc,"$(mtr)ActVel") {
  field(DESC,"Actual Velocity/msec")
  field(CALC,"A*B")
  field(INPA,"$(mtr)ActVelSvo.VAL NPP MS")
  field(INPB,"2.258823327")
  field(PREC,"2")
  field(EGU,"(cts/msec)")
}

### Added by Sergey 2005/04/14 for fast scans and homing:

record(longout, "$(mtr)Mtr") {
  field(DESC, "Motor Number")
  field(DTYP, "Soft Channel")
  field(VAL, "$(m)")
}
